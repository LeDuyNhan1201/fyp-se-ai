x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  # --------- OpenTelemetry Collector ---------
  smartcv-otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: smartcv-otel-collector
    logging: *logging
    restart: always
    depends_on:
      smartcv-tempo:
        condition: service_healthy
      smartcv-prometheus:
        condition: service_healthy
    command: [ "--config=/etc/otelcol-config.yml", "--feature-gates=pkg.translator.prometheus.NormalizeName"]
    ports:
      - 5555:5555
      - 6666:6666
    volumes:
      - ./docker/otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
    networks:
      - smartcv-network

  # --------- Prometheus ---------
  smartcv-prometheus:
    image: prom/prometheus:latest
    container_name: smartcv-prometheus
    logging: *logging
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=1h
      - --web.enable-remote-write-receiver
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    ports:
      - 9090:9090
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/status || exit 1
      interval: 5s
      retries: 10
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - smartcv-network

  # --------- Grafana ---------
  smartcv-grafana:
    image: grafana/grafana:latest
    container_name: smartcv-grafana
    logging: *logging
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      interval: 5s
      retries: 10
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - smartcv-network

  # --------- Grafana Loki ---------
  smartcv-loki:
    image: grafana/loki:latest
    container_name: smartcv-loki
    logging: *logging
    restart: always
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./docker/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - ./loki-data:/loki
    networks:
      - smartcv-network

  # --------- Grafana Tempo ---------
  init-tempo:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  smartcv-tempo:
    image: *tempoImage
    container_name: smartcv-tempo
    logging: *logging
    restart: always
    depends_on:
      - init-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - 3200:3200   # tempo
      - 9095:9095 # tempo grpc
      - 4317:4317  # otlp grpc
      - 4318:4318  # otlp http
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3200/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/var/tempo
    networks:
      - smartcv-network
