server:
  port: 30002
  servlet:
    context-path: /file

# --------- Eureka ---------
eureka:
  instance:
    hostname: ${DISCOVERY_DOMAIN:localhost}

  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${DISCOVERY_PORT:31000}/eureka/

# --------- Gateway ---------
gateway:
  domain: ${GATEWAY_DOMAIN:localhost}
  port: ${GATEWAY_PORT:30000}

# --------- Security ---------
security:
  jwt:
    access-signer-key: ${ACCESS_SIGNER_KEY}

  public-endpoints:
    - /example

  grpc:
    public-methods:
      - FileService/getAllDownloadUrls

# --------- Axon ---------
axon:
  event-bus-name: smartcv-event-bus
  metrics:
    auto-configuration:
      enabled: true
    micrometer:
      dimensional: true

# --------- Minio ---------
minio:
  endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
  access-key: ${MINIO_USERNAME}
  secret-key: ${MINIO_PASSWORD}
  bucket-name: smartcv-bucket

# --------- API document ---------
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
  show-actuator: true

openapi:
  service:
    name: file
    api-docs: file-service-rest-api
    title: File Service REST API
    description: This is the APIs documentation for File Service.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Smart CV File Service APIs For Development

# --------- Logging ---------
logging:
  pattern:
    correlation: "[${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]"

  level:
    org:
      springframework:
        security: DEBUG

# -------- Resilience4j ---------
resilience4j:
  circuitbreaker:
    configs:
      grpcGroup:
        registerHealthIndicator: true
        slidingWindowSize: 50
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED

    instances:
      authService:
        baseConfig: grpcGroup

  timelimiter:
    configs:
      grpcGroup:
        timeoutDuration: 10s
        cancelRunningFuture: true

    instances:
      authService:
        baseConfig: grpcGroup

# --------- Metrics & Monitoring ---------
otel:
  instrumentation:
    common:
      default-enabled: false  # Tắt toàn bộ mặc định, chọn lọc bật từng cái
    jdbc:
      enabled: false
    spring-web:
      enabled: true
    spring-webmvc:
      enabled: true
    logback-appender:
      enabled: true
    logback-mdc:
      enabled: true
    micrometer:
      enabled: true  # Bật để gửi metrics qua Prometheus
    kafka:
      enabled: true
    mongo:
      enabled: true
    r2dbc:
      enabled: false

management:
  opentelemetry:
    resource-attributes:
      service.name: ${spring.application.name}
      cluster: local

  otlp:
    tracing:
      endpoint: ${OTLP_ENDPOINT:http://localhost:4318}/v1/traces
    metrics:
      export:
        endpoint: ${OTLP_ENDPOINT:http://localhost:4318}/v1/metrics
        step: 5s

  info:
    git:
      enabled: true
      mode: full

  endpoint:
    metrics:
      access: read_only
    prometheus:
      access: read_only
    health:
      show-details: always

  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus

  prometheus:
    metrics:
      export:
        enabled: true

  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}

  observations:
    annotations:
      enabled: true
    key-values:
      application: ${spring.application.name}

  tracing:
    enabled: true
    sampling:
      probability: 1.0

# --------- Spring configs ---------
spring:
  config:
    import: file:env.properties

  application:
    name: file-service

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  grpc:
    server:
      name: file-service
      host: ${FILE_SERVICE_HOST:localhost}
      port: ${FILE_SERVICE_GRPC_PORT:31002}
      servlet:
        enabled: false
      reflection:
        enabled: true
      health:
        enabled: true
        actuator:
          enabled: true
        observations:
          enabled: true

    client:
      enabled: true
      observations:
        enabled: true
      channels:
        auth-service:
          address: static://${AUTH_SERVICE_ADDRESS:localhost:31006}
          health:
            enabled: true
            service-name: auth-service

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

  data:
    mongodb:
      axon:
        uri: ${MONGODB_URI}

    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:localhost}
      database: 0

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9091}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8085}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false