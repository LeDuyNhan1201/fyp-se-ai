server:
  port: 30003
  servlet:
    context-path: /job
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      force-request: true
      force-response: true

# --------- Eureka ---------
eureka:
  instance:
    prefer-ip-address: true
    hostname: ${DISCOVERY_DOMAIN:localhost}

  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${DISCOVERY_PORT:31000}/eureka/

# --------- Gateway ---------
gateway:
  domain: ${GATEWAY_DOMAIN:localhost}
  port: ${GATEWAY_PORT:30000}

# --------- Security ---------
security:
  jwt:
    access-signer-key: ${ACCESS_SIGNER_KEY}

  public-endpoints:
    - /graphiql
    - /graphql

# --------- Axon ---------
axon:
  event-bus-name: smartcv-event-bus
  metrics:
    auto-configuration:
      enabled: true
    micrometer:
      dimensional: true

# ---------- Debezium ---------
debezium:
  connectors:
    - name: job-service-postgres-connector
      topic: dbjob.public.job
      config:
        connector.class: io.debezium.connector.postgresql.PostgresConnector
        topic.prefix: dbjob
        database.hostname: smartcv-postgres
        database.port: 5432
        database.user: ${POSTGRES_USERNAME}
        database.password: ${POSTGRES_PASSWORD}
        database.dbname: job_service_db
        schema.include.list: public
        table.include.list: public.job
        slot.name: job_slot
        key.converter: org.apache.kafka.connect.json.JsonConverter
        value.converter: org.apache.kafka.connect.json.JsonConverter
        key.converter.schemas.enable: false
        value.converter.schemas.enable: false

# --------- API document ---------
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
  show-actuator: true

openapi:
  service:
    name: job
    api-docs: job-service-rest-api
    title: Job Service REST API
    description: This is the APIs documentation for Job Service.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Smart CV Job Service APIs For Development

# --------- Logging ---------
logging:
  pattern:
    correlation: "[${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]"
#  level:
#    com:
#      zaxxer:
#        hikari: DEBUG

#  level:
#    org:
#      springframework:
#        security: DEBUG

# --------- Metrics & Monitoring ---------
management:
  info:
    git:
      enabled: true
      mode: full

  endpoint:
    metrics:
      access: read_only
    prometheus:
      access: read_only
    health:
      show-details: always

  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - mappings
          - health
          - info
          - metrics
          - prometheus

  prometheus:
    metrics:
      export:
        enabled: true

  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}

  observations:
    key-values:
      application: ${spring.application.name}

  tracing:
    sampling:
      probability: 1.0

# --------- Spring configs ---------
spring:
  config:
    import: file:env.properties

  application:
    name: job-service

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  grpc:
    server:
      host: ${JOB_SERVICE_HOST:localhost}
      port: ${JOB_SERVICE_GRPC_PORT:31003}
      servlet:
        enabled: false
      reflection:
        enabled: true
      health:
        enabled: true
        actuator:
          enabled: true
        observations:
          enabled: true

  graphql:
    path: /graphql

#    cors:
#      allowed-headers: "*"
#      allowed-methods: "*"
#      allowed-origin-patterns: "*"
#      allowed-origins: "*"

    graphiql:
      enabled: true
      path: /graphiql
      headers:
        Authorization: "Bearer <token>"

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

  elasticsearch:
    uris: ${ELASTICSEARCH_URIS:http://localhost:9200}
    connection-timeout: 5s

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${JOB_POSTGRES_URL:jdbc:postgresql://localhost:5432/job_service_db}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
#    testWhileIdle: true
#    test-on-borrow: true
#    hikari:
#      driver-class-name: org.postgresql.Driver
#      maximum-pool-size: 10
#      minimum-idle: 2
#      idle-timeout: 600000  # Đóng connection nhàn rỗi sau 10 phút
#      max-lifetime: 900000  # Tạo connection mới sau 15 phút để tránh bị đóng bất ngờ
#      keepalive-time: 180000  # Ping connection sau 3 phút để giữ connection sống
#      connection-timeout: 30000  # Timeout nếu không lấy được connection sau 30 giây
#      validation-timeout: 5000  # Timeout kiểm tra connection còn sống sau 5 giây
#      leak-detection-threshold: 60000  # Cảnh báo nếu connection bị giữ quá 60 giây

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  data:
    mongodb:
      uri: ${MONGODB_URI}

    elasticsearch:
      repositories:
        enabled: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9091}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8085}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false