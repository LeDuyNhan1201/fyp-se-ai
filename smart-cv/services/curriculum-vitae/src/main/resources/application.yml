server:
  port: 30001
  servlet:
    context-path: /cv
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      force-request: true
      force-response: true

# --------- Eureka ---------
eureka:
  instance:
    hostname: ${DISCOVERY_DOMAIN:localhost}

  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${DISCOVERY_PORT:31000}/eureka/

# --------- Gateway ---------
gateway:
  domain: ${GATEWAY_DOMAIN:localhost}
  port: ${GATEWAY_PORT:30000}

# --------- Security ---------
security:
  jwt:
    access-signer-key: ${ACCESS_SIGNER_KEY}

  public-endpoints:
    - /graphiql
    - /graphql

# --------- Axon ---------
axon:
  event-bus-name: smartcv-event-bus
  metrics:
    auto-configuration:
      enabled: true
    micrometer:
      dimensional: true

# --------- API document ---------
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
  show-actuator: true

openapi:
  service:
    name: curriculum_vitae
    api-docs: cv-service-rest-api
    title: Curriculum Vitae Service REST API
    description: This is the APIs documentation for Curriculum Vitae Service.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Smart CV Curriculum Vitae Service APIs For Development

# --------- Logging ---------
logging:
  pattern:
    correlation: "[${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]"

#  level:
#    org:
#      springframework:
#        security: DEBUG

# --------- Metrics & Monitoring ---------
management:
  info:
    git:
      enabled: true
      mode: full

  endpoint:
    metrics:
      access: read_only
    prometheus:
      access: read_only
    health:
      show-details: always

  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus

  prometheus:
    metrics:
      export:
        enabled: true

  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}

  observations:
    key-values:
      application: ${spring.application.name}

  tracing:
    sampling:
      probability: 1.0

# --------- Spring configs ---------
spring:
  config:
    import: file:env.properties

  application:
    name: cv-service

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  grpc:
    client:
      channels:
        auth-service:
          address: static://${AUTH_SERVICE_ADDRESS:localhost:31006}
          health:
            enabled: true
            service-name: com.ben.smartcv.common.AuthService
          observations:
            enabled: true

        job-service:
          address: static://${JOB_SERVICE_ADDRESS:localhost:31003}
          health:
            enabled: true
            service-name: com.ben.smartcv.common.JobService
          observations:
            enabled: true

  graphql:
    path: /graphql

#    cors:
#      allowed-headers: "*"
#      allowed-methods: "*"
#      allowed-origin-patterns: "*"
#      allowed-origins: "*"

    graphiql:
      enabled: true
      path: /graphiql

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

  data:
    mongodb:
      uri: ${MONGODB_URI}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9091}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8085}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false