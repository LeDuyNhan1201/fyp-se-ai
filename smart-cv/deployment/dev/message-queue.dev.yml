x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  # --------- Kafka brokers ---------
  smartcv-kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: smartcv-kafka1
    logging: *logging
    restart: always
    ports:
      - 9091:9091
      - 9991:9991
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9091 --list || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 15s
    environment:
      CLUSTER_ID: cLs1
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: r1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@smartcv-kafka1:29091

      KAFKA_LISTENERS: LOCAL://:9091,PLAINTEXT://smartcv-kafka1:19091,CONTROLLER://smartcv-kafka1:29091,BROKER://smartcv-kafka1:39091
      KAFKA_ADVERTISED_LISTENERS: LOCAL://localhost:9091,PLAINTEXT://smartcv-kafka1:19091,BROKER://smartcv-kafka1:39091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LOCAL:PLAINTEXT,BROKER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER

#      # SSL/TLS
#      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
#      KAFKA_SSL_KEYSTORE_CREDENTIALS: creds
#      KAFKA_SSL_KEY_CREDENTIALS: creds
#      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
#      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: creds
#      KAFKA_SSL_CLIENT_AUTH: 'none'
#      #KAFKA_SSL_CLIENT_AUTH: 'requested'
#      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''
#
#      # SASL
#      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
#      KAFKA_SASL_MECHANISMS_CONTROLLER_PROTOCOL: PLAIN
#      KAFKA_SASL_ENABLED_MECHANISMS: 'PLAIN'
#      KAFKA_SUPER_USERS: 'User:admin,User:ben'
#      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
#      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/jaas/kafka_server.conf"

      # Others
      KAFKA_JMX_PORT: 9991
      KAFKA_JMX_HOSTNAME: smartcv-kafka1

      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - smartcv-kafka1-data:/var/lib/kafka/data
    networks:
      - smartcv-network

  # --------- Schema registry ---------
  smartcv-schemaregistry:
    image: confluentinc/cp-schema-registry:latest
    container_name: smartcv-schemaregistry
    logging: *logging
    restart: always
    depends_on:
      smartcv-kafka1:
        condition: service_healthy
    ports:
      - 8085:8085
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      SCHEMA_REGISTRY_HOST_NAME: smartcv-schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: smartcv-kafka1:19091
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_LISTENERS: http://smartcv-schemaregistry:8085,http://localhost:8085

      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: http
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 2
      SCHEMA_REGISTRY_DEBUG: true
    networks:
      - smartcv-network

  # --------- Axon Server ---------
  smartcv-axonserver:
    image: axoniq/axonserver:latest
    container_name: smartcv-axonserver
    logging: *logging
    restart: always
    ports:
      - 8024:8024
      - 8124:8124
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      AXONIQ_AXONSERVER_HOSTNAME: smartcv-axonserver
      AXONIQ_AXONSERVER_STANDALONE: "TRUE"
      AXONIQ_AXONSERVER_DEVMODE: true
    networks:
      - smartcv-network

  # --------- Kafka Debezium ---------
  smartcv-debezium:
    image: debezium/connect:3.0.0.Final
    container_name: smartcv-debezium
    logging: *logging
    restart: always
    depends_on:
      smartcv-kafka1:
        condition: service_healthy
      smartcv-postgres:
        condition: service_healthy
    ports:
      - 8083:8083
      - 5005:5005
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      BOOTSTRAP_SERVERS: smartcv-kafka1:19091
      GROUP_ID: smartcv_debezium_group
      CONFIG_STORAGE_TOPIC: smartcv_debezium_connect_configs
      OFFSET_STORAGE_TOPIC: smartcv_debezium_connect_offsets
      STATUS_STORAGE_TOPIC: smartcv_debezium_connect_statuses
    networks:
      - smartcv-network

volumes:
  smartcv-kafka1-data:
