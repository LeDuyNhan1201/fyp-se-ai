server:
  port: 30006
  servlet:
    context-path: /user
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      force-request: true
      force-response: true

# --------- Gateway ---------
gateway:
  domain: localhost
  port: 30000

# --------- Axon ---------
axon:
  metrics:
    auto-configuration:
      enabled: true
    micrometer:
      dimensional: true

# --------- API document ---------
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
  show-actuator: true

openapi:
  service:
    name: user
    api-docs: user-service-rest-api
    title: User Service REST API
    description: This is the APIs documentation for User Service.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Smart CV User Service APIs For Development

# --------- Metrics & Monitoring ---------
management:
  info:
    git:
      enabled: true
      mode: full

  endpoint:
    metrics:
      access: read_only
    prometheus:
      access: read_only
    health:
      show-details: always

  endpoints:
    web:
      base-path: /actuator
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus

  prometheus:
    metrics:
      export:
        enabled: true

  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}

  observations:
    key-values:
      application: ${spring.application.name}

  tracing:
    sampling:
      probability: 1.0

# --------- Spring configs ---------
spring:
  config:
    import: file:env.properties

  application:
    name: user

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  graphql:
    path: /graphql

    cors:
      allowed-headers: "*"
      allowed-methods: "*"
      allowed-origin-patterns: "*"
      allowed-origins: "*"

    graphiql:
      enabled: true
      path: /graphiql

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${JOB_POSTGRES_URL:jdbc:postgresql://localhost:5432/user_service_db}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  data:
    mongodb:
      uri: ${MONGODB_URI}

    elasticsearch:
      repositories:
        enabled: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9091}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8085}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false